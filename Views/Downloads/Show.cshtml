@model ShareLoader.Models.ShowGroup

@{
    ViewData["Title"] = Model.Group.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<ul class="h-menu bg-blue fg-white" data-role="ripple" data-ripple-target="li">
    <li><a asp-action="Delete" asp-route-id="@Model.Group.ID" onclick="dialogDelete(this.href); return false;"><span class="mif-bin"></span> Löschen</a></li>
    <li><a asp-action="Edit" asp-route-id="@Model.Group.ID"><span class="mif-pencil"></span> Bearbeiten</a></li>
    <li><a asp-action="Reset" asp-route-id="@Model.Group.ID" onclick="dialogReset(this.href); return false;"><span class="mif-backward"></span> Zurücksetzen</a></li>
</ul>

<h1>Downloads</h1>
<h2>@Model.Group.Name</h2>


<ul data-role="listview" data-view="content">
    @foreach (var item in Model.Items)
    {

        <li data-id="@item.ID" data-group="@item.GroupID" data-icon="<span class='@item.GetImage()' data-id='@item.ID' data-role='popover' data-popover-trigger='click' data-popover-position='right' data-popover-text='Die ist ein toller Text'>"
            data-caption="<span class='text-muted'>@item.GetSize()</span> @item.Name"
            data-content="@item.GetContentView()">

            <div class="toolbar" style="display:none">
                <a asp-controller="Item" asp-action="Statistics" asp-route-id="@item.ID" class="tool-button"><span class="mif-chart-line"></span></a>
                <a asp-controller="Item" asp-action="Errors" asp-route-id="@item.ID" class="tool-button"><span class="mif-warning"></span></a>
                <a asp-controller="Item" asp-action="Reset" asp-route-id="@item.ID" class="tool-button" onclick="return dialogResetItem(this.href, '@item.Name');"><span class="mif-backward"></span></a>
            </div>
        </li>

    }
</ul>


@section Scripts {
    <script>
    $().ready(function () {
        websocket = null;
        connect();
        $.each($(("ul.listview li div.toolbar")), function (index, ele) {
            var parent = $(ele).parent();
            var htmlStr = $('<div>').append($(ele).attr("style", "").clone()).html();
            $(ele).remove();

            $("span.icon span", parent).attr("data-popover-text", htmlStr);
        });
    });

    function connect() {
        var url = "";

        if (window.location.href.indexOf("https") != -1)
            url = "wss" + window.location.href.substring(5);
        else
            url = "ws" + window.location.href.substring(4);
            
        webSocket = new WebSocket(url); //"wss://share.mikegerst.de/", "chat");

        webSocket.onopen = function () {
            console.log("connected");
            webSocket.send("register;0;@Model.Group.ID;downinfo");
            console.log("sent register");
        };



        webSocket.onmessage = function (evt) {
            var resp;
            try {
                resp = JSON.parse(evt.data);
            } catch (err) {
                console.log(evt);
                console.log(evt.data);
                console.log(err);
                return;
            }

            console.log(resp);

            switch (resp.type) {
                case "error":
                    setIcon(resp.id, "mif-warning fg-red");
                    setPbCol(resp.id, "red");
                    setPbVal(resp.id, 100);
                    setText(resp.id, "Error");
                    break;
                case "reset":
                    setIcon(resp.id, "mif-hour-glass fg-black");
                    setPbCol(resp.id, "brown");
                    setPbVal(resp.id, 0);
                    setText(resp.id, "Zurückgesetzt");
                    break;
                case "check":
                    setIcon(resp.id, "mif-spinner3 fg-dargGray ani-spin");
                    setPbCol(resp.id, "yellow");
                    setPbVal(resp.id, 100);
                    setText(resp.id, "Check");
                    break;
                case "extract":
                    setIcon(resp.id, "mif-stackoverflow fg-mauve ani-flash");
                    setPbCol(resp.id, "mauve");
                    setPbVals(resp.group, resp.perc);
                    setText(resp.id, "Extracting");
                    break;
                case "downloaded":
                    setIcon(resp.id, "mif-checkmark fg-orange");
                    setPbCol(resp.id, "brown");
                    setPbVal(resp.id, 100);
                    setText(resp.id, "Downloaded");
                    break;
                case "extracted":
                    setIcons(resp.id, "mif-stackoverflow fg-darkMauve");
                    setPbCols(resp.id, "darkMauve");
                    setPbVals(resp.id, 100);
                    setTexts(resp.id, "Extracted");
                    break;
                case "moving":
                    setIcons(resp.id, "mif-move-down fg-darkBlue");
                    setPbCols(resp.id, "darkBlue");
                    setPbVals(resp.id, 100);
                    setTexts(resp.id, "Moving");
                    break;
                case "fin":
                    setIcons(resp.id, "mif-checkmark fg-green");
                    setPbCols(resp.id, "green");
                    setPbVals(resp.id, 100);
                    setTexts(resp.id, "");
                    break;
                case "info":
                    setIcon(resp.id, "mif-file-download fg-darkGrey ani-flash");
                    setText(resp.id).html(resp.speed);
                    setPbVal(resp.id, resp.perc);
                    break;
            }
        };
    }

    function setIcon(id, icon) {
        $("li[data-id=" + id + "] .icon > span").attr("class", icon);
    }
    function setPbCol(id, color) {
        var pbc = $("li[data-id=" + id + "] .mt-1 > div");
        pbc.attr("class", "bar bg-" + color);
    }
        function setPbVal(id, val) {
            console.log(id + " - " + val);
        $("li[data-id=" + id + "] .mt-1").data('progress').val(val);
    }
    function setText(id, text) {
        return $("li[data-id=" + id + "] .text-muted").html(text);
    }

    function setIcons(id, icon) {
        $("li[data-group=" + id + "] .icon > span").attr("class", icon);
    }
    function setPbCols(id, color) {
        var pbc = $("li[data-group=" + id + "] .mt-1 > div");
        pbc.attr("class", "bar bg-" + color);
    }
    function setPbVals(id, val) {
        $("li[data-group=" + id + "] .mt-1").each(function (it, ele) {
            console.log(ele);
            $(ele).data('progress').val(val);
        });
    }
    function setTexts(id, text) {
        return $("li[data-group=" + id + "] .text-muted").html(text);
    }

    function dialogDelete(redirect) {
        Metro.dialog.create({
            title: "Download-Gruppe löschen",
            content: "<div>Möchten Sie die Download-Gruppe<br>'@Model.Group.Name'<br>wirklich löschen?</div>",
            actions: [
                {
                    caption: "Dateien behalten",
                    cls: "js-dialog-close warning",
                    onclick: function () {
                        window.location = redirect;
                    }
                },
                {
                    caption: "Löschen",
                    cls: "js-dialog-close alert",
                    onclick: function () {
                        window.location = redirect + "?all=true";
                    }
                },
                {
                    caption: "Abbrechen",
                    cls: "js-dialog-close"
                }
            ]
        });
    }
        
    function dialogReset(redirect) {
        Metro.dialog.create({
            title: "Download-Gruppe zurücksetzen",
            content: "<div>Möchten Sie die Download-Gruppe '@Model.Group.Name' wirklich zurücksetzen?</div>",
            actions: [
                {
                    caption: "Zurücksetzen",
                    cls: "js-dialog-close warning",
                    onclick: function () {
                        window.location = redirect;
                    }
                },
                {
                    caption: "Abbrechen",
                    cls: "js-dialog-close"
                }
            ]
        });
        return false;
    }

    function dialogResetItem(redirect, name) {
        Metro.dialog.create({
            title: "Download-Item zurücksetzen",
            content: "<div>Möchten Sie das Download-Item '" + name + "' wirklich zurücksetzen?</div>",
            actions: [
                {
                    caption: "Zurücksetzen",
                    cls: "js-dialog-close warning",
                    onclick: function () {
                        $.get(redirect);
                    }
                },
                {
                    caption: "Abbrechen",
                    cls: "js-dialog-close"
                }
            ]
        });
        return false;
    }
    </script>
}